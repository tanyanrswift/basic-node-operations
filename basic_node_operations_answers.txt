1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.
  sort: This command sorts the lines in alphabetical order, within their blocks of code. The output was:
  $ sort commands.js
      break;
      break;
      commandLibrary.cat(userInputArray.slice(1));
      commandLibrary.echo(userInputArray.slice(1).join(" "));
      done(data);
      if (err) throw err;
    });
    case "cat":
    case "echo":
    const fileName = fullPath[0];
    done(userInput);
    fs.readFile(fileName, (err, data) => {
    "cat": function(fullPath) {
    "echo": function(userInput) {
    }
    }
    },
    const command = userInputArray[0];
    const userInputArray = userInput.split(" ");
    process.stdout.write('\nprompt > ');
    process.stdout.write(output);
    switch (command) {

    }
    }
    };
    const commandLibrary = {
    const fs = require("fs");
    function done(output) {
    function evaluateCmd(userInput) {
    module.exports.commandLibrary = commandLibrary;
    module.exports.evaluateCmd = evaluateCmd;


  wc: This command outputs the number of lines, number of words, and number of characters in the file. The output was:
    $ wc commands.js
    36  73 820 commands.js

  uniq: This command sorts each line in a file and only returns lines that we don't already have in the file. The output was:
  $ uniq commands.js
  const fs = require("fs");

  function done(output) {
    process.stdout.write(output);
    process.stdout.write('\nprompt > ');
  }

  function evaluateCmd(userInput) {
    const userInputArray = userInput.split(" ");
    const command = userInputArray[0];

    switch (command) {
      case "echo":
        commandLibrary.echo(userInputArray.slice(1).join(" "));
        break;
      case "cat":
        commandLibrary.cat(userInputArray.slice(1));
        break;
      }
  }

  const commandLibrary = {
    "echo": function(userInput) {
      done(userInput);
    },
    "cat": function(fullPath) {
      const fileName = fullPath[0];
      fs.readFile(fileName, (err, data) => {
        if (err) throw err;
        done(data);
      });
    }
  };

  module.exports.commandLibrary = commandLibrary;
  module.exports.evaluateCmd = evaluateCmd;

2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.
  $ uniq commands.js | wc
      36      73     820

  This took all the unique lines in commands.js and used it as an input to count the lines, words, and characters. It resulted in the same data
  as running wc commands.js because there are no repeated lines in our file.

6. In this checkpoint, you encountered built-in JavaScript methods as well as the new ES6 syntax. Review the information below before attempting the
programming challenge.
Given a string, reverse the order of characters in each word within a sentence while maintaining the original word order and whitespace and return the string.
To improve your problem-solving experience, use the suggested functions to solve the problem.
Example
Input: "I'm learning to program algorithms!"
Output: "m'I gninrael ot margorp !smhtirogla"

Starter Code

function reverseString(inputString){
   var words = inputString.split(' ');
   var finalString = [];
   for(var i = 0; i < words.length; i ++){
     finalString.push(words[i].split('').reverse().join(''));
   }  
   return finalString.join(' ');
}

console.log(reverseString("I'm learning to program algorithms!"));
